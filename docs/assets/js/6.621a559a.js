(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{184:function(e,a,s){e.exports=s.p+"assets/img/audacity-cut.c32e5412.png"},198:function(e,a,s){"use strict";s.r(a);var t=s(0),n=Object(t.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"edit-encoded-audio-with-ffmpeg-and-audacity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#edit-encoded-audio-with-ffmpeg-and-audacity","aria-hidden":"true"}},[e._v("#")]),e._v(" Edit Encoded Audio with FFmpeg and Audacity")]),e._v(" "),t("h2",{attrs:{id:"installation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installation","aria-hidden":"true"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),t("h3",{attrs:{id:"ffmpeg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ffmpeg","aria-hidden":"true"}},[e._v("#")]),e._v(" FFmpeg")]),e._v(" "),t("h4",{attrs:{id:"macos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#macos","aria-hidden":"true"}},[e._v("#")]),e._v(" macOS")]),e._v(" "),t("p",[e._v("Get "),t("a",{attrs:{href:"http://brew.sh",target:"_blank",rel:"noopener noreferrer"}},[e._v("Homebrew"),t("OutboundLink")],1),e._v(" if you have not installed it yet. Then run:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("brew install ffmpeg\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[e._v("Tip")]),e._v(" "),t("p",[e._v("FFmpeg brew formula has many options, e. g. "),t("code",[e._v("--with-opencore-amr")]),e._v(". To get all\nthe information about the formula, run:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("brew info ffmpeg | less\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),e._v(" "),t("h4",{attrs:{id:"other-platforms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#other-platforms","aria-hidden":"true"}},[e._v("#")]),e._v(" Other platforms")]),e._v(" "),t("p",[e._v("Download from "),t("a",{attrs:{href:"https://www.ffmpeg.org/download.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.ffmpeg.org/download.html"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"audacity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#audacity","aria-hidden":"true"}},[e._v("#")]),e._v(" Audacity")]),e._v(" "),t("p",[e._v("Download from "),t("a",{attrs:{href:"http://www.audacityteam.org/download/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.audacityteam.org/download/"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Then download Audacity-compatible FFmpeg 2.3."),t("em",[e._v("x")]),e._v(" shared libraries. See more\n"),t("a",{attrs:{href:"http://manual.audacityteam.org/man/faq_installation_and_plug_ins.html#ffdown",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"quick-introduction-to-ffmpeg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quick-introduction-to-ffmpeg","aria-hidden":"true"}},[e._v("#")]),e._v(" Quick introduction to FFmpeg")]),e._v(" "),t("h3",{attrs:{id:"terminology"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#terminology","aria-hidden":"true"}},[e._v("#")]),e._v(" Terminology")]),e._v(" "),t("div",{staticClass:"tip custom-block"},[t("ul",[t("li",[t("p",[t("strong",[e._v("Format")]),e._v(" describes a container.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Coder")]),e._v(" encodes raw data (packets) and puts it in a container.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Muxers")]),e._v(" take encoded data in the form of AVPackets and write it into files\nor other output byte streams in the specified container format.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Decoder")]),e._v(" decodes (demuxes) lossy or lossless compressed data stored in a\ncontainer.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Demuxers")]),e._v(" read a media file and split it into chunks of data (packets).")])])]),e._v(" "),t("p",[e._v("There can be multiple codecs for the same format. If you don't specify what\ncodec to use, ffmpeg will use the format's default codec.")])]),e._v(" "),t("h3",{attrs:{id:"list-all-formats-actually-muxers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-all-formats-actually-muxers","aria-hidden":"true"}},[e._v("#")]),e._v(" List all formats (actually, muxers)")]),e._v(" "),t("p",[e._v("Run:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg -formats\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("or better:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg -hide_banner -formats\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("div",{staticClass:"output"},[t("p",{staticClass:"title"},[e._v("Output:")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" D. = Demuxing supported\n .E = Muxing supported\n --\n D  3dostr          3DO STR\n  E 3g2             3GP2 (3GPP2 file format)\n  E 3gp             3GP (3GPP file format)\n D  4xm             4X Technologies\n  E a64             a64 - video for Commodore 64\n D  aa              Audible AA format files\n...\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])])]),t("ul",[t("li",[t("em",[e._v("D")]),e._v(" stands for decoding/demuxing.")]),e._v(" "),t("li",[t("em",[e._v("E")]),e._v(" stands for encoding/muxing.")])]),e._v(" "),t("h3",{attrs:{id:"list-all-codecs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-all-codecs","aria-hidden":"true"}},[e._v("#")]),e._v(" List all codecs")]),e._v(" "),t("p",[e._v("Run:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg -codecs\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("or better:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg -hide_banner -codecs\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("div",{staticClass:"output"},[t("p",{staticClass:"title"},[e._v("Output:")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Codecs:\n D..... = Decoding supported\n .E.... = Encoding supported\n ..V... = Video codec\n ..A... = Audio codec\n ..S... = Subtitle codec\n ...I.. = Intra frame-only codec\n ....L. = Lossy compression\n .....S = Lossless compression\n -------\n D.VI.. 012v                 Uncompressed 4:2:2 10-bit\n D.V.L. 4xm                  4X Movie\n D.VI.S 8bps                 QuickTime 8BPS video\n .EVIL. a64_multi            Multicolor charset for Commodore 64 (encoders: a64multi )\n .EVIL. a64_multi5           Multicolor charset for Commodore 64, extended with 5th color (colram) (encoders: a64multi5 )\n D.V..S aasc                 Autodesk RLE\n D.VIL. aic                  Apple Intermediate Codec\n DEVI.S alias_pix            Alias/Wavefront PIX image\n DEVIL. amv                  AMV Video\n D.V.L. anm                  Deluxe Paint Animation\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br")])])]),t("p",[e._v("Some codecs cannot encode, i. e. they are just decoders.\nSome codecs cannot decode, i. e. they are just coders.")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("The "),t("code",[e._v("amr")]),e._v(" format is supported as well:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg -hide_banner -formats | grep -i amr\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("div",{staticClass:"output"},[t("p",{staticClass:"title"},[e._v("Output:")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" DE amr             3GPP AMR\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),t("p",[e._v("It is supported by 2 codes:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg -hide_banner -codecs | grep -i amr\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("div",{staticClass:"output"},[t("p",{staticClass:"title"},[e._v("Output:")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" DEA.L. amr_nb               AMR-NB (Adaptive Multi-Rate NarrowBand) (decoders: amrnb amr_nb_at libopencore_amrnb ) (encoders: libopencore_amrnb )\n D.A.L. amr_wb               AMR-WB (Adaptive Multi-Rate WideBand) (decoders: amrwb libopencore_amrwb )\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])])]),t("h2",{attrs:{id:"edit-encoded-audio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#edit-encoded-audio","aria-hidden":"true"}},[e._v("#")]),e._v(" Edit encoded audio")]),e._v(" "),t("p",[e._v("Let us cut a section from an "),t("code",[e._v(".amr")]),e._v(" audio stored in a file with the name\n"),t("code",[e._v("incondite.amr")]),e._v(". It was recorded on an Android device. This means we'd better\nuse the "),t("code",[e._v("opencore-amr")]),e._v(" codecs — audio codecs extracted from Android Open Source\nProject, which should be installed along with FFmpeg.")]),e._v(" "),t("h3",{attrs:{id:"probe-the-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#probe-the-file","aria-hidden":"true"}},[e._v("#")]),e._v(" Probe the file")]),e._v(" "),t("p",[e._v("Get the basic information, such as sample rate or number of channels.")]),e._v(" "),t("p",[e._v("With "),t("code",[e._v("ffprobe")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffprobe incondite.amr\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("div",{staticClass:"output"},[t("p",{staticClass:"title"},[e._v("Output:")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[amr @ 0x7f9a25000000] Estimating duration from bitrate, this may be inaccurate\nInput #0, amr, from 'incondite.amr':\n\n    Stream #0:0: Audio: amr_nb (samr / 0x726D6173), 8000 Hz, mono, flt\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])])]),t("p",[e._v("As this "),t("code",[e._v("incodite.amr")]),e._v(" file came from an Android device, better specify the\n"),t("code",[e._v("libopencore_amrnb")]),e._v(" codec for probing. But this won't work with "),t("code",[e._v("ffprobe")]),e._v(" for\nsome reason. Well, we can use "),t("code",[e._v("ffmpeg")]),e._v(", like this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg -acodec libopencore_amrnb -i incondite.amr\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("div",{staticClass:"output"},[t("p",{staticClass:"title"},[e._v("Output:")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[amr @ 0x7fb42c000000] Estimating duration from bitrate, this may be inaccurate\nInput #0, amr, from 'incondite.amr':\n\n    Stream #0:0: Audio: amr_nb (samr / 0x726D6173), 8000 Hz, mono, s16\nAt least one output file must be specified\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])])]),t("p",[e._v("Different in this output is the "),t("code",[e._v("sample_fmt")]),e._v(" — "),t("code",[e._v("s16")]),e._v(" vs. "),t("code",[e._v("flt")]),e._v(". I assume the\nopencore-amr probe is more correct.")]),e._v(" "),t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[e._v("Tip")]),e._v(" "),t("p",[e._v("To see all the sample formats run:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg -sample_fmts\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("Output:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("name   depth\nu8        8\ns16      16\ns32      32\nflt      32\ndbl      64\nu8p       8\ns16p     16\ns32p     32\nfltp     32\ndblp     64\ns64      64\ns64p     64\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[e._v("The letters mean:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("u")]),e._v(" — "),t("strong",[e._v("u")]),e._v("nsigned,")]),e._v(" "),t("li",[t("code",[e._v("s")]),e._v(" — "),t("strong",[e._v("s")]),e._v("igned,")]),e._v(" "),t("li",[t("code",[e._v("flt")]),e._v(" — "),t("strong",[e._v("fl")]),e._v("oa"),t("strong",[e._v("t")]),e._v(",")]),e._v(" "),t("li",[t("code",[e._v("dbl")]),e._v(" - "),t("strong",[e._v("d")]),e._v("ou"),t("strong",[e._v("bl")]),e._v("e,")]),e._v(" "),t("li",[t("code",[e._v("p")]),e._v(" — "),t("strong",[e._v("p")]),e._v("lanar.")])]),e._v(" "),t("p",[e._v("For planar sample formats, each audio channel is in a separate data plane, and\nlinesize is the buffer size, in bytes, for a single plane. All data planes must\nbe the same size. For packed sample formats, only the first data plane is used,\nand samples for each channel are interleaved. In this case, linesize is the\nbuffer size, in bytes, for the 1 plane.")])]),e._v(" "),t("p",[e._v("Back to the probe results:")]),e._v(" "),t("ul",[t("li",[e._v("8000 Hz — the "),t("strong",[e._v("sample rate")]),e._v(",")]),e._v(" "),t("li",[e._v("mono — means "),t("strong",[e._v("1 channel")]),e._v(",")]),e._v(" "),t("li",[e._v("s16 — the "),t("strong",[e._v("sample format")]),e._v(" (expressed by native C types).")])]),e._v(" "),t("h3",{attrs:{id:"decode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decode","aria-hidden":"true"}},[e._v("#")]),e._v(" Decode")]),e._v(" "),t("p",[e._v("Okay, now as we know the audio parameters let us decode the\n"),t("code",[e._v("incondite.amr")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg \\\n  -acodec libopencore_amrnb \\\n  -i incondite.amr \\\n  -ar 8000 \\\n  -ac 1 \\\n  -f s16le \\\n  incondite.raw\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("The options mean:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("-acodec")]),e._v(" or "),t("code",[e._v("-codec:a")]),e._v(" — the audio codec (if it stands before the "),t("code",[e._v("-i")]),e._v("\noption it defines the decoder);")]),e._v(" "),t("li",[t("code",[e._v("-i")]),e._v(" — the input file;")]),e._v(" "),t("li",[t("code",[e._v("-ar")]),e._v(" — the audio sampling frequency (sample rate);")]),e._v(" "),t("li",[t("code",[e._v("-ac")]),e._v(" — the number of channels;")]),e._v(" "),t("li",[t("code",[e._v("-f")]),e._v(" — format.")])]),e._v(" "),t("p",[e._v("See more on audio options "),t("a",{attrs:{href:"https://ffmpeg.org/ffmpeg.html#Audio-Options",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Format "),t("code",[e._v("s16le")]),e._v(" means "),t("em",[e._v("PCM signed 16-bit little-endian")]),e._v(". The output will be a\ncontainer with raw data (in the "),t("em",[e._v("s16le")]),e._v(" format) as we do not specify any codec\n(encoder).")]),e._v(" "),t("p",[e._v("Let's run the command above and see the output:")]),e._v(" "),t("div",{staticClass:"output"},[t("p",{staticClass:"title"},[e._v("Output:")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" 1  [amr @ 0x7f9cfa000000] Estimating duration from bitrate, this may be inaccurate\n 2  Input #0, amr, from 'incondite.amr':\n\n 4      Stream #0:0: Audio: amr_nb (samr / 0x726D6173), 8000 Hz, mono, s16\n 5  Output #0, s16le, to 'incondite.raw':\n 6    Metadata:\n 7      encoder         : Lavf57.56.100\n 8      Stream #0:0: Audio: pcm_s16le, 8000 Hz, mono, s16, 128 kb/s\n 9      Metadata:\n10        encoder         : Lavc57.64.101 pcm_s16le\n11  Stream mapping:\n12    Stream #0:0 -> #0:0 (amr_nb (libopencore_amrnb) -> pcm_s16le (native))\n13  Press [q] to stop, [?] for help\n14  incondite.amr: Input/output errorbitrate= 128.0kbits/s speed= 503x\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])])]),t("p",[e._v("Oops! There is an error on line 14. What is wrong? Well, let us run the same\ncommand again but with the "),t("code",[e._v("-v")]),e._v(" (verbose) option set to "),t("code",[e._v("debug")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg \\\n  -v debug \\\n  -acodec libopencore_amrnb \\\n  -i incondite.amr \\\n  -ar 8000 \\\n  -ac 1 \\\n  -f s16le \\\n  incondite.raw\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("div",{staticClass:"output"},[t("p",{staticClass:"title"},[e._v("Output:")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("24  Opening an input file: incondite.amr.\n25  [file @ 0x7fd2054051c0] Setting default whitelist 'file,crypto'\n26  [amr @ 0x7fd206004200] Format amr probed with size=2048 and score=100\n27  [amr @ 0x7fd206004200] Before avformat_find_stream_info() pos: 6 bytes read:32768 seeks:0 nb_streams:1\n28  [amr @ 0x7fd206004200] All info found\n29  [amr @ 0x7fd206004200] Estimating duration from bitrate, this may be inaccurate\n30  [amr @ 0x7fd206004200] After avformat_find_stream_info() pos: 1606 bytes read:32768 seeks:0 frames:50\n31  Input #0, amr, from 'incondite.amr':\n\n33      Stream #0:0, 50, 1/8000: Audio: amr_nb (samr / 0x726D6173), 8000 Hz, mono, s16\n\n53  Output #0, s16le, to 'incondite.raw':\n54    Metadata:\n55      encoder         : Lavf57.56.100\n56      Stream #0:0, 0, 1/8000: Audio: pcm_s16le, 8000 Hz, mono, s16, 128 kb/s\n57      Metadata:\n58        encoder         : Lavc57.64.101 pcm_s16le\n59  Stream mapping:\n60    Stream #0:0 -> #0:0 (amr_nb (libopencore_amrnb) -> pcm_s16le (native))\n61  Press [q] to stop, [?] for help\n62  cur_dts is invalid (this is harmless if it occurs once at the start per stream)\nincondite.amr: Input/output errorbitrate= 128.0kbits/s speed= 159x\n64  [output stream 0:0 @ 0x7fd205603b00] EOF on sink link output stream 0:0:default.\n65  No more output streams to write to, finishing.\n\n68  Input file #0 (incondite.amr):\n69    Input stream #0:0 (audio): 49713 packets read (1590816 bytes); 49713 frames decoded (7954080 samples);\n70    Total: 49713 packets (1590816 bytes) demuxed\n71  Output file #0 (incondite.raw):\n72    Output stream #0:0 (audio): 49713 frames encoded (7954080 samples); 49713 packets muxed (15908160 bytes);\n73    Total: 49713 packets (15908160 bytes) muxed\n74  49713 frames successfully decoded, 0 decoding errors\n75  [AVIOContext @ 0x7fd205700080] Statistics: 0 seeks, 49713 writeouts\n76  [AVIOContext @ 0x7fd205506840] Statistics: 1590822 bytes read, 0 seeks\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br")])])]),t("p",[e._v("And here wee see the reason and the explanation in parenthesis on line 62:")]),e._v(" "),t("div",{staticClass:"output"},[t("p",{staticClass:"title"}),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("62  cur_dts is invalid (this is harmless if it occurs once at the start per stream)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),t("p",[e._v("It's nothing.")]),e._v(" "),t("p",[e._v("In the end, we have the statistics:")]),e._v(" "),t("div",{staticClass:"output"},[t("p",{staticClass:"title"}),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("74  49713 frames successfully decoded, 0 decoding errors\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),t("h3",{attrs:{id:"edit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#edit","aria-hidden":"true"}},[e._v("#")]),e._v(" Edit")]),e._v(" "),t("p",[e._v("Import in Audacity, open waveform (dB), fit vertically, cut the unnecessary,\nexport as raw:")]),e._v(" "),t("p",[t("img",{attrs:{src:s(184),alt:"Audacity: Waveform (dB)"}})]),e._v(" "),t("h3",{attrs:{id:"encode-back"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encode-back","aria-hidden":"true"}},[e._v("#")]),e._v(" Encode back")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ffmpeg \\\n  -v verbose \\\n  -ar 8000 \\\n  -ac 1 \\\n  -f s16le \\\n  -i cut.raw \\\n  -acodec libopencore_amrnb \\\n  cut.amr\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("br"),e._v(" "),t("ClientOnly",[t("Disqus",{attrs:{shortname:"notes-maxie-xyz",language:"en"}})],1),e._v(" "),t("br"),e._v(" "),t("div",{staticStyle:{"text-align":"center","font-size":"x-small"}},[e._v("\n    Allow loading scripts from disqus.com to see the comments.\n")])],1)},[],!1,null,null,null);a.default=n.exports}}]);